
import 'dart:io';
import 'dart:ui';

//import 'package:advance_pdf_viewer/advance_pdf_viewer.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
//import 'package:flutter_plugin_pdf_viewer/flutter_plugin_pdf_viewer.dart';
import 'package:image_cropper/image_cropper.dart';
import 'package:image_picker/image_picker.dart';
import 'package:intl/intl.dart';
import 'package:partswanted/pictures.dart';
import 'package:partswanted/viewpo.dart';
import 'package:toast/toast.dart';
import 'food.dart';
import 'package:flutter/scheduler.dart';

class EditStall extends StatefulWidget {
  final thePageTitle;
  final theIndex;
  final theStallDocId; //refer to this case's DocID generated by firebase
  final theStallIdNo; //this is the unique stall ID designed by program and assigned to each stall
  final theStall; //whatModel
  final theFood; //whatPN
  final thePlace; //whatUse
  final theQty; //whatQty
  final theRemark; // remark
  //final theAddress;
  final theImage; //image
  final theGroupId; //refer to groupID
  final thePreviousSort;
  final theMultipleParts;
  final theJobRefNo;

  EditStall({this.thePageTitle, this.theIndex, this.theStallDocId, this.theStallIdNo, this.theImage, this.theStall, this.theFood, this.thePlace, this.theQty, this.theRemark, this.theGroupId, this.thePreviousSort, this.theMultipleParts, this.theJobRefNo});

  @override
  _EditStallState createState() => _EditStallState(pageTitle: thePageTitle, groupId: theGroupId, stallId: theStallDocId, stallIdNo: theStallIdNo,  index: theIndex, stall: theStall, food0: theFood, place: thePlace, qty0: theQty, remark0: theRemark, image0: theImage, previousSort: thePreviousSort, multipleParts: theMultipleParts, jobRefNo: theJobRefNo);
}

class _EditStallState extends State<EditStall> {
  String pageTitle;
  int index;
  String stallId;
  String stallIdNo;
  //String stall0;
  String food0;
  //String place0;
  String qty0;
  String remark0;
  String stall;
  String food;
  String place;
  String qty;
  String remark;
  String address;
  String image0;
  String image;
  String groupId;
  String previousSort;
  String jobRefNo;
  int multipleParts;
  bool buttonTapped = false;
  //String justText = "click here";
  int x=1;
  String imageNew;
  String oldMsgList;
  String newMsgLog;
  String userId;
  String myEmail;
  String userName;
  int settingDone;
  //String myEmail;
  String whoUploadId;
  String poUrl="";
  //PDFDocument poDoc;
  String quotes0 = "-";
  //String quotes = "-";
  String poStatus;
  int stageCurrent=0;
  int partCount=0;
  //List partMore =[];
  List pnMore = List.filled(5, "", growable: true);
  List qtyMore = List.filled(5, "", growable: true);
  List remarkMore = List.filled(5, "", growable: true);
  List imageMore = List.filled(5, "", growable: true);
  List tgtPriceMore = List.filled(5, "", growable: true);
  List quotes = List.filled(5, "", growable: true);
  List poQuote = List.filled(5, "", growable: true);
  String poQuote0;
  //List pnMoreBuy = List.filled(5, "", growable: true);
  //bool buy1;
  List<bool> isSelected=[false, false];
  List<bool> isSelected0=[false, false];
  List<bool> isSelected1=[false, false];
  List<bool> isSelected2=[false, false];
  List<bool> isSelected3=[false, false];

  bool toCart0 = false;
  List toCart = List.filled(5, false, growable: true);
  //List isSelected = List.filled(5, "", growable: true);
  String food0Buy = "";
  String quoteToDisplay;
  int quoteNotCompleted;
  int partIndex = -1;
  String custCode;

  String toBuyPN = "-";
  String toBuyPN0 = "-";
  String toBuyPN1 = "-";
  String toBuyPN2 = "-";
  String toBuyPN3 = "-";

  bool pnPick=true;
  bool pnPick0;
  bool pnPick1;
  bool pnPick2;
  bool pnPick3;


  //String atPage;
  //List pnMore = List.filled(5, "", growable: true);

  ScrollController _scrollController = new ScrollController(
    //initialScrollOffset: 0.0,
    //keepScrollOffset: true,
  );

  _EditStallState({this.pageTitle, this.stallId, this.stallIdNo, this.groupId, this.index, this.stall, this.food0, this.place, this.qty0, this.remark0, this.image0, this.previousSort, this.multipleParts, this.jobRefNo});

  TextEditingController inputChatMsg = new TextEditingController();
  TextEditingController inputWhere;
  TextEditingController inputWhatStall;
  TextEditingController inputWhatJob;
  TextEditingController inputWhatFood;
  TextEditingController inputWhatQty;
  TextEditingController inputRemark;
  List memberEmail = [];
  int mCount;
  String curr = "";
  bool numFound = true;

  void initState() {
    super.initState();
    //Toast.show("xxxxxxxx!!!", context, duration: Toast.LENGTH_LONG, gravity: Toast.TOP);
    getMsgList();
    //checkCurr();
    //stall = stall0;
    food = food0;
    //place = place0;
    qty = qty0;
    remark = remark0;
    image = image0;

    // the dummy url below was stored in firebase Storage which was suddenly gone, and hence give error. So deliberately forced it to "" if this url was used
    // must switch to if image0 ="". But must fix that at the firestore first. and also at webentry, drop the dummy url and put it to ""
    //if (image0 == "https://firebasestorage.googleapis.com/v0/b/partswanted-aa4f7.appspot.com/o/partsIcon.png?alt=media&token=69ed115e-862b-452f-bf31-e56baabd20c3")
    //{image="";} // then at the scaffold side (see below), if image == "" then use the assets image installed in the project here
    //else{image = image0;}

    //if (multipleParts ==1) {
      //print ("food:   " + food);
//print ("stallId:     " + stallId);
      int p =0;
      FirebaseFirestore.instance.collection(groupId).doc(stallId).collection('moreParts').orderBy("whatPN", descending: true)
          .get().then((moreParts){
        if (moreParts.docs.length >0){
          //print ("doclength:   " + moreParts.docs.length.toString());
          moreParts.docs.forEach((part) {
            //print ("moreParts: " + part["whatPN"]);
            pnMore[p] = part["whatPN"];
            //if (part.data()["toBuy"] != null) {pnMoreBuy[p] = part["toBuy"];}
            qtyMore[p] = part["whatQty"];
            remarkMore[p] = part["remark"];
            if (part.data()["toCart"] != null){toCart[p] = part["toCart"];}else{toCart[p] = false;}
            //print ("init pnMore: "+ p.toString() +"  " + pnMore[p]);
            //print ("pnMoreBuy[" + p.toString() + "]:" +  pnMoreBuy[p]);
            if(p==0){
              isSelected0=[toCart[p], !toCart[p]];
              if (toCart[p]==true){toBuyPN0 = pnMore[p];}
              //print (p.toString() + ": " + toCart[p].toString() + "    toBuyPN0:  " + toBuyPN0);
            }
            if(p==1){
              isSelected1=[toCart[p], !toCart[p]];
              if (toCart[p]==true){toBuyPN1 = pnMore[p];}
              //print (p.toString() + ": " + toCart[p].toString() + "    toBuyPN1:  " + toBuyPN1);
            }
            if(p==2){
              isSelected2=[toCart[p], !toCart[p]];
              if (toCart[p]==true){toBuyPN2 = pnMore[p];}
              //print (p.toString() + ": " + toCart[p].toString() +  "    toBuyPN2:  " + toBuyPN2);
            }
            if(p==3){
              isSelected3=[toCart[p], !toCart[p]];
              if (toCart[p]==true){toBuyPN3 = pnMore[p];}
              //print (p.toString() + ": " + toCart[p].toString() +  "    toBuyPN3:  " + toBuyPN3);
            }

            p++;
            //setState(() {getQuotes();});
            //partCount++;
          });
          setState(() {getQuotes();}); // 1. do getQuotes for the part and all morePart first, so you know which multi part is quoted ans=d which not
          multipleParts =1;
          //print (partMore[0] +"   "  + partMore[1] + "   " + partMore[2]);
        }
        else{getQuotes();}
        //print ("partCount:  " + partCount.toString());
      });

      FirebaseFirestore.instance.collection(groupId).doc(stallId).collection('morePictures').orderBy("whatPN", descending: true)
          .get().then((morePictures){
        if (morePictures.docs.length >0){
          int q=0;
          morePictures.docs.forEach((picture) {
            //print ("moreParts: " + part["whatPN"]);
            if(imageMore[q]!=null){imageMore[q] = picture["image"];}
            else{imageMore[q] = "https://firebasestorage.googleapis.com/v0/b/partswanted-aa4f7.appspot.com/o/partsIcon.png?alt=media&token=69ed115e-862b-452f-bf31-e56baabd20c3";}
            q++;
            //print ("here : " + partMore[0] + "    length: " + partMore.length.toString());
            setState(() {});
            //partCount++;
          });
          //print (partMore[0] +"   "  + partMore[1] + "   " + partMore[2]);
        }
        //print ("partCount:  " + partCount.toString());
      });
    //}


    //User user = FirebaseAuth.instance.currentUser;
    userId = FirebaseAuth.instance.currentUser.uid;
    myEmail = FirebaseAuth.instance.currentUser.email;

    FirebaseFirestore.instance.collection("users") .where("userId", isEqualTo: userId).get().then((result){
      if (result.docs.isNotEmpty){
        result.docs.forEach((record) {userName = record["name"];});

        inputWhere = new TextEditingController(text: place);
        inputWhatStall = new TextEditingController(text: stall);
        inputWhatJob = new TextEditingController(text: jobRefNo);
        inputWhatFood = new TextEditingController(text: food);
        inputWhatQty = new TextEditingController(text: qty);
        inputRemark = new TextEditingController(text: remark);
        //print ("inputWhere::::::" + inputWhere.text);
        //print (place);
      }
    });

    FirebaseFirestore.instance
        .collection(groupId)
        .doc(stallId)
        .get()
        .then((value) async {
      if (value.data() != null) {
        whoUploadId = value["whoupload"];
        if (await value.data()["poUploaded"] != null)
        {poUrl = await value["poUploaded"];
        if (mounted){setState(() {});}
        if (await value.data()["poStatus"] != null)
          poStatus = await value["poStatus"];
        }
        if (await value.data()["stage"] != null)
          stageCurrent = await value["stage"];

        // todone: identify customer here for updating condCode later when stage change
        if (await value.data()["customer"] != null) {
          String customer = await value["customer"];
          if (customer == "Harvey Norman"){custCode = "HVN";}
            else{if (customer == "Lenovo"){custCode = "LNV";}
             else{if (customer == "Courts"){custCode = "COU";}
               else{if (customer == "Asus"){custCode = "ASU";}
                 else{if (customer == "BSC"){custCode = "BSC";}
                     else{custCode = "XXX";}
                 }
               }
             }
            }
          }
        // printing array from firestore data
        //List arrayCode = value['condCode'];
        //print (arrayCode[1]);

        if (value.data()["toCart"] != null){toCart0 = value["toCart"];}else{toCart0 = false;}
        isSelected=[toCart0, !toCart0];
        if (toCart0 == true){toBuyPN = food0;}
        //toCart0 = false;
        //print ("00: " + toCart0.toString() +  "    toBuyPN:   " + toBuyPN);
      }

    });

    FirebaseFirestore.instance
        .collection("groups")
        .doc(groupId)
        .get()
        .then((value) async {
      mCount= value['memberCount'];
      for (int x = 0; x < mCount; x++ ){
        memberEmail.add(value['member'+ (x+1).toString()]);
        //print ("memberEmail:  " + memberEmail[x]);
      }
    });

    //if (index!=-2){getQuotes();}
    //getQuotes(); // no need get quotes here, get quotes above works and all scenario needed to getQuotes covered
  }


  checkCurr(xx)async{
    numFound = true;
    //String xx = "123";
    int quoteLength = xx.length;
    String xxSub;

    int w;
    int numLocation=-1;

    for (w=0; w < quoteLength; w++){ // check if got proper number behind the String
      //print ("qouteLength:  " + quoteLength.toString());
      xxSub = xx.substring(w,w+1);
      if (xxSub == "0" || xxSub == "1" || xxSub == "2" || xxSub == "3"  || xxSub == "4" || xxSub == "5" || xxSub == "6" || xxSub == "7"|| xxSub == "8" || xxSub == "9") {
        if (numLocation < 0) {numLocation = w;}

        //print ("numLocation:   " + numLocation.toString());
        for (int ww=w+1; ww < xx.length; ww++){
          xxSub = xx.substring(ww,ww+1);
          if (xxSub != "0" && xxSub != "1" && xxSub != "2" && xxSub != "3"  && xxSub != "4" && xxSub != "5" && xxSub != "6" && xxSub != "7" && xxSub != "8" && xxSub != "9"){
            Toast.show("No proper quotes entered!!!", context, duration: Toast.LENGTH_LONG, gravity: Toast.BOTTOM);
            numFound = false;
          }
        }
        break;
      }
    }

    if (numFound==true) { //got proper number found
      if (numLocation == 0) {
        curr = "RMB";
        Toast.show("Currency not stated. RMB assumed!!!", context, duration: Toast.LENGTH_LONG, gravity: Toast.BOTTOM);
      }

      else {
        if (numLocation < 3) {
          //print("No proper currency entered");
          Toast.show("No proper currency entered!!", context, duration: Toast.LENGTH_LONG, gravity: Toast.BOTTOM);
          numFound = false;
        }

        else{
          curr = xx.substring(0, 3).toUpperCase();
          if (curr != 'RMB' && curr != 'SGD' && curr != 'USD' &&
              curr != 'MYR' && curr != 'INR' && curr != 'IDR' &&
              curr != 'EUR') {
            Toast.show("Currency not recognised!!!", context, duration: Toast.LENGTH_LONG, gravity: Toast.BOTTOM);
            numFound = false;
          } else {curr = "";}
        }

      }
    }
    //if (numFound == true) {print ("curr:  " + curr);} //then add this curr to inputText, though could be "". if not true, dont proceed
  }



  // secret feature
  deleteMsg()async{
    int deleteDone=0;
    if (userId == "5HQjvArqxmZh5Cnwd7huTalo2bh1" || userId == "5ksQrdScGtRMNibBC9chqXnqbyF2"){
      //if (userId == "5HQjvArqxmZh5Cnwd7huTalo2bh1" || userId == "94b7TA43zVZiAD7rrBTMNXOvfUj2"){
      //if (userId == "oHbW3mrxT8VlvenzLUd4YKQjGXX2" || userId == "94b7TA43zVZiAD7rrBTMNXOvfUj2"){
      // print ("delete here...........");

      await FirebaseFirestore.instance.collection(groupId).doc(stallId).collection("messages").get().then((snapshot) {
        for (DocumentSnapshot ds in snapshot.docs) {
          ds.reference.delete(); deleteDone=1;
        }
        if (deleteDone ==1){
          FirebaseFirestore.instance
              .collection(groupId)
              .doc(stallId)
              .collection("messages")
              .doc("messages")
              .set({"messages": "message restart on  " + DateFormat.yMMMd().format(DateTime.now()).toString() + "  "  + DateFormat('HH:mm').format(DateTime.now()).toString()});
          FirebaseFirestore.instance
              .collection(groupId)
              .doc(stallId)
              .collection("messages")
              .doc("messages")
              .update({"dateStamp": DateFormat.yMMMd().format(DateTime.now()).toString()});
          FirebaseFirestore.instance
              .collection(groupId)
              .doc(stallId)
              .collection("messages")
              .doc("messages")
              .update({"timeStamp": DateTime.now()});
        }
      });
    }
  }

  quitAction(){
    FirebaseFirestore.instance.collection(groupId).doc(stallId).collection("mailBox").doc(myEmail).set({"gotMail": 0});
    Navigator.pushReplacement(context, MaterialPageRoute(builder: (context) => Food(thePageTitle: pageTitle, theGroupId: groupId, theStallIndex: index, thePreviousSort: previousSort)));
  }

  foodPicked (){
    partIndex = -1;
    quoteToDisplay = quotes0;
    //stall = stall0;
    food = food0;
    //place = place0;
    qty = qty0;
    remark = remark0;
    image = image0;

    //todo: this works?
    inputWhere = new TextEditingController(text: place);
    inputWhatStall = new TextEditingController(text: stall);
    inputWhatJob = new TextEditingController(text: jobRefNo);
    inputWhatFood = new TextEditingController(text: food);
    inputWhatQty = new TextEditingController(text: qty);
    inputRemark = new TextEditingController(text: remark);
    setState(() {quoteToDisplay = quotes0;
    pnPick = true;
    pnPick0 = false;
    pnPick1 = false;
    pnPick2 = false;
    pnPick3 = false;
    });

  }

  pn0Picked (){
    partIndex = 0;
    quoteToDisplay = quotes[0];
    //print ("quotes[0]:   " + quotes[0]);
    //stall = stall0;
    food = pnMore[0];
    //place = place0;
    qty = qtyMore[0];
    //qty = "88888";
    remark = remarkMore[0];
    image = imageMore[0];

    //todo: this works?
    inputWhere = new TextEditingController(text: place);
    inputWhatStall = new TextEditingController(text: stall);
    inputWhatJob = new TextEditingController(text: jobRefNo);
    inputWhatFood = new TextEditingController(text: food);
    inputWhatQty = new TextEditingController(text: qty);
    inputRemark = new TextEditingController(text: remark);
    setState(() {quoteToDisplay = quotes[0];
    pnPick = false;
    pnPick0 = true;
    pnPick1 = false;
    pnPick2 = false;
    pnPick3 = false;
    });
  }

  pn1Picked (){
    partIndex = 1;
    quoteToDisplay = quotes[1];
    //stall = stall0;
    food = pnMore[1];
    //place = place0;
    qty = qtyMore[1];
    //qty = "88888";
    remark = remarkMore[1];
    image = imageMore[1];

    //todo: this works?
    inputWhere = new TextEditingController(text: place);
    inputWhatStall = new TextEditingController(text: stall);
    inputWhatJob = new TextEditingController(text: jobRefNo);
    inputWhatFood = new TextEditingController(text: food);
    inputWhatQty = new TextEditingController(text: qty);
    inputRemark = new TextEditingController(text: remark);
    setState(() {quoteToDisplay = quotes[1];
    pnPick = false;
    pnPick0 = false;
    pnPick1 = true;
    pnPick2 = false;
    pnPick3 = false;
    });
  }

  pn2Picked (){
    partIndex = 2;
    quoteToDisplay = quotes[2];
    //stall = stall0;
    food = pnMore[2];
    //place = place0;
    qty = qtyMore[2];
    //qty = "88888";
    remark = remarkMore[2];
    image = imageMore[2];

    //todo: this works?
    inputWhere = new TextEditingController(text: place);
    inputWhatStall = new TextEditingController(text: stall);
    inputWhatJob = new TextEditingController(text: jobRefNo);
    inputWhatFood = new TextEditingController(text: food);
    inputWhatQty = new TextEditingController(text: qty);
    inputRemark = new TextEditingController(text: remark);
    setState(() {quoteToDisplay = quotes[2];
    pnPick = false;
    pnPick0 = false;
    pnPick1 = false;
    pnPick2 = true;
    pnPick3 = false;
    });
  }

  pn3Picked (){
    partIndex = 3;
    quoteToDisplay = quotes[3];
    //stall = stall0;
    food = pnMore[3];
    //place = place0;
    qty = qtyMore[3];
    //qty = "88888";
    remark = remarkMore[3];
    image = imageMore[3];

    //todo: this works?
    inputWhere = new TextEditingController(text: place);
    inputWhatStall = new TextEditingController(text: stall);
    inputWhatJob = new TextEditingController(text: jobRefNo);
    inputWhatFood = new TextEditingController(text: food);
    inputWhatQty = new TextEditingController(text: qty);
    inputRemark = new TextEditingController(text: remark);
    setState(() {quoteToDisplay = quotes[3];
    pnPick = false;
    pnPick0 = false;
    pnPick1 = false;
    pnPick2 = false;
    pnPick3 = true;
    });
  }

  quoteCompletedCheck ()async{
    quoteNotCompleted = 0;
    //print (quotes0 + "  " + quotes[0] + "  " + quotes[1]);

    if (quotes0 == "-") {quoteNotCompleted = 1;}
    else{
      for (int q = 0; q<5; q++){
        if (quotes[q] == "-"){quoteNotCompleted = 1;}
    }}
    //print ("quoteNotCompleted_0:   " + quoteNotCompleted.toString());
  }

  getQuotes ()async{ //todone: looks like this is not triggerred as indicated in the print below where quotes[0] and quotes[1] all are "" (done, it is the "" issue. sometime it is "" and not "-")
    // therefore when do quoteNotComplete check, it did not catch the condition quote[] = "-", and hence not registering quotes incomplete
    //print ("here at getQuotes");
    await FirebaseFirestore.instance
        .collection(groupId)
        .doc(stallId)
        .get()
        .then((value) {
          if(value.data()['quotes'] != null && value.data()['quotes'] != ""){quotes0 = value['quotes'];}else{quotes0 = "-";quoteNotCompleted = 1;} // todo: i think no need to do this quoteNoComplete Check here liao.
                                                                                                                    // todo: but leave it but. this was triggered is the init state which check the quoteNotComplete state for 1st time, though I still not sure if necessary
      quoteToDisplay = quotes0;
    });
    //print ("quotes0 here1 "+ quotes0);

    //print ("quotes0 here1 "+ quotes[0]);


    if (pnMore[0] != "") {
      await FirebaseFirestore.instance
          .collection(groupId)
          .doc(stallId).collection("moreParts").doc(pnMore[0])
          .get()
          .then((value) {
        //if (value.exists) {
          if(value.data()['quotes'] != null && value.data()['quotes'] != ""){quotes[0] = value['quotes'];}else{quotes[0] = "-";quoteNotCompleted = 1;}
          //value.data()['quotes'] != null ? quotes[0] = value['quotes'] : quotes[0] = "-";
          //print ("init stage quotes[0]:   " + quotes[0]);
        //}
      });
    }

    if (pnMore[1] != "") {
      await FirebaseFirestore.instance
          .collection(groupId)
          .doc(stallId).collection("moreParts").doc(pnMore[1])
          .get()
          .then((value) {
        //if (value.exists) {
          if (value.data()['quotes'] != null && value.data()['quotes'] != "") {
            quotes[1] = value['quotes'];
          } else {
            quotes[1] = "-";
            quoteNotCompleted = 1;
          }
          //value.data()['quotes'] != null ? quotes[1] = value['quotes'] : quotes[1] = "-";
        //}
        });
    }
    //print ("quotes[0] here1 "+ quotes[0]);
    //print ("quotes[1] here1 "+ quotes[1]);

    if (pnMore[2] != "") {
      await FirebaseFirestore.instance
          .collection(groupId)
          .doc(stallId).collection("moreParts").doc(pnMore[2])
          .get()
          .then((value) {
        if(value.data()['quotes'] != null && value.data()['quotes'] != ""){quotes[2] = value['quotes'];}else{quotes[2] = "-";quoteNotCompleted = 1;}
        //value.data()['quotes'] != null ? quotes[2] = value['quotes'] : quotes[2] = "-";
      });
    }

    if (pnMore[3] != "") {
      await FirebaseFirestore.instance
          .collection(groupId)
          .doc(stallId).collection("moreParts").doc(pnMore[3])
          .get()
          .then((value) {
        if(value.data()['quotes'] != null && value.data()['quotes'] != ""){quotes[3] = value['quotes'];}else{quotes[3] = "-";quoteNotCompleted = 1;}
        //value.data()['quotes'] != null ? quotes[3] = value['quotes'] : quotes[3] = "-";
      });
    }
  }

  updateCart(p,cart)async{
    if (p==-1) {await FirebaseFirestore.instance.collection(groupId).doc(stallId)
        .update({"toCart": cart}); toCart0 = cart;print("toCart0 here1 " + toCart0.toString());} else {
      await FirebaseFirestore.instance.collection(groupId).doc(stallId)
          .collection("moreParts").doc(pnMore[p])
          .update({"toCart": cart}); toCart[p] = cart;print ("toCart[" + p.toString() + "] here1 " + toCart[p].toString());
    }
    //setState(() {
      //if(p==1){isSelected1=[cart, !cart];}
    //});
  }


  Future getMsgList() async {
    //print ("tocart hererererere    :" + toCart0.toString());
    FirebaseFirestore.instance
        .collection(groupId).doc(stallId).collection("messages").get().then((result)async{
      if (result.docs.length != 0){
        await FirebaseFirestore.instance
            .collection(groupId)
            .doc(stallId).collection("messages").doc("messages")
            .get()
            .then((value) {
          //if (value.data() != null) {
          //  if (value['messages'] != null) {
          newMsgLog = value['messages'];
          //}
          // }
        });
        if (mounted) setState(() {});
      }
    });
  }
  @override
  Widget build(BuildContext context) {

    //checkCurr();
    getMsgList();

    updateInfo() async {
      buttonTapped = true;
      //print ("place 1: " + place);
      if (inputWhere.text != ""){place = inputWhere.text;}
      if (inputWhatStall.text != ""){stall = inputWhatStall.text;}
      //if (inputWhatJob.text != ""){jobRefNo = inputWhatJob.text;}
      if (inputWhatFood.text != ""){food = inputWhatFood.text;}
      if (inputWhatQty.text != ""){qty = inputWhatQty.text;}
      if (inputRemark.text != ""){remark = inputRemark.text;}

      Map<String, String> userMap = {
        "whatUse": place, //whatUse
        "whatModel": stall, //whatModel
        "whatPN": food, //WhatPN
        "whatQty": qty, //whatQty
        //"address": inputAddress.text,
        "remark": remark,
      };

      await FirebaseFirestore.instance.collection(groupId).doc(stallId).update(userMap);
      Toast.show("Information uploaded", context, duration: Toast.LENGTH_LONG, gravity: Toast.TOP);
    }

    ok(){
      //Navigator.pop(context);
      Navigator.pushReplacement(context, MaterialPageRoute(builder: (context) => Food(theGroupId: groupId, theStallIndex: index)));
    }

    File croppedImage;
    final picker = ImagePicker();
    var pickedImage;
    var downloadUrl;
    Future captureImage(ImageSource source) async {
      //print ("+++++++++++++++");
      //print ("email :" + myEmail);
      //print ("whouploadId: " + whoUploadId);
      //imageCache.clear();
      //imageCache.clearLiveImages();
      pickedImage = await picker.getImage(source: source);
      //File compressedImage = await picker.getImage(source: ImageSource.camera, imageQuality: 85);
      //print ("---------------------");
      //print ("here 111:::::::::::::::::: " + pickedImage.path);
      if (pickedImage.path == null ){} else {
        croppedImage = await ImageCropper().cropImage(
            sourcePath: pickedImage.path,
            aspectRatio: CropAspectRatio(ratioX: 1, ratioY: 1),
            compressQuality: 100,
            maxWidth: 500,
            maxHeight: 500,
            compressFormat: ImageCompressFormat.jpg,
            androidUiSettings: AndroidUiSettings(
              toolbarColor: Colors.blue,
              toolbarTitle: "Crop it",
            ));
      }
      //print (image);

      // (done) main pic is at userEmail/stallId/stallId_0.  stallId is known. userEmail must be passed over from edit
      StorageReference firebaseStorageRef =
      //FirebaseStorage.instance.ref().child(userId);
      //FirebaseStorage.instance.ref().child(stallId);
      FirebaseStorage.instance.ref().child(stallIdNo + "/" + myEmail + "/" +  stallIdNo +"_0"); // (done) for Storage mgtm. must use stallIdNo the actual program assigned stallID
      StorageUploadTask uploadTask = firebaseStorageRef.putFile(croppedImage); // in doing so, the new add image actually uses the same image file name as existing, thus replacing the existing one
      StorageTaskSnapshot taskSnapshot = await uploadTask.onComplete;
      downloadUrl = await taskSnapshot.ref.getDownloadURL();



      /*
      //QuerySnapshot qn = await Firestore.instance.collection("FoodStall").document(stallId).collection("pictures").getDocuments();
        //print("here: " + urlClicked);
        String urlToDelete;
        await FirebaseFirestore.instance.collection(groupId).doc(stallId).get()
            .then((value) {urlToDelete = value['image'];});

        StorageReference StorageDeleteRef = await FirebaseStorage.instance.getReferenceFromUrl(urlToDelete);
        await StorageDeleteRef.delete();
        //imageUrl.remove(urlToDelete);
        //getPicDone = 0;
        setState(() {});
*/

      await FirebaseFirestore.instance.collection(groupId).doc(stallId).update({"image": downloadUrl});
      imageNew = downloadUrl;
      setState(() {});
    }


    //getMsgList();
/*
    int getQuotesDone = 0;
    getQuotes ()async{
      await FirebaseFirestore.instance
          .collection(groupId)
          .doc(stallId)
          .get()
          .then((value) {
        value.data()['quotes'] != null?
        quotes0 = value['quotes']:quotes0 = "-";
      });
print ("pnMore[0]: " + pnMore[0]);

      if (pnMore[0] != "") {
        await FirebaseFirestore.instance
            .collection(groupId)
            .doc(stallId).collection("moreParts").doc(pnMore[0])
            .get().then((value) {
          if (value.exists) {
            value.data()['quotes'] != null ?
            quotes[0] = value['quotes'] : quotes[0] = "-";
          }
        });
      }

      if (pnMore[1] != "") {
        await FirebaseFirestore.instance
            .collection(groupId)
            .doc(stallId).collection("moreParts").doc(pnMore[1])
            .get()
            .then((value) {
          value.data()['quotes'] != null ?
          quotes[1] = value['quotes'] : quotes[1] = "-";
        });
      }

      if (pnMore[2] != "") {
        await FirebaseFirestore.instance
            .collection(groupId)
            .doc(stallId).collection("moreParts").doc(pnMore[2])
            .get()
            .then((value) {
          value.data()['quotes'] != null ?
          quotes[2] = value['quotes'] : quotes[2] = "-";
        });
      }

      if (pnMore[3] != "") {
        await FirebaseFirestore.instance
            .collection(groupId)
            .doc(stallId).collection("moreParts").doc(pnMore[3])
            .get()
            .then((value) {
          value.data()['quotes'] != null ?
          quotes[3] = value['quotes'] : quotes[3] = "-";
        });
      }
    }
    if (index!=-2){getQuotes();} // if index -2 measn newly added item, no need to do this. else error because the stallId was not pass over from food and hence not the correct stallId
    /// or see how to fix this, unlike adding from mobile, all the docID here are not the stallID if item added from web.  When added from web, the docID are auto assigned
    /// unless make adding from web having the same stallID format like mobile adding? But even then will be troublesome to pass the stall Id here through nottification
    /// so the best way is read the stallId from firebase the with that we know what docID is it if we make sure doc ID is the stallID when craeting it.
    /// from food, the so called stallID is actually the docId that was read at food and passed here
    /// so, 1) stabdardise webentry docId with stallId format
    /// 2) when come here, read the stallId from date base to know what the docId is (forget about passing docId over here
    /// that should work for all cisrcumstances, no matter come from webentry adding notification or from food.
*/
    writeData(msgInput) async{
      //print ("at writeData");
      await FirebaseFirestore.instance
          .collection(groupId).doc(stallId).collection("messages").get().then((result)async {
        if (result.docs.length != 0 && settingDone != 1) {
          String dateStamp;
          await FirebaseFirestore.instance
              .collection(groupId)
              .doc(stallId).collection("messages").doc("messages")
              .get()
              .then((value) async {
            if (value.data()['dateStamp'] != null) {
              dateStamp = value['dateStamp'];
              if (dateStamp == DateFormat.yMMMd().format(DateTime.now())) {
                //print ("1");
                // same day
                DateTime dTime = DateTime.fromMillisecondsSinceEpoch(value['timeStamp'].millisecondsSinceEpoch);
                if ((DateTime.now().difference (dTime)).inMinutes >  2)  { // timeing exceed
                  newMsgLog = value["messages"] +  '\n' + DateFormat('HH:mm').format(DateTime.now()).toString() + '\n' + "  " + userName + ": " + msgInput;
                  //print ("inside difference");
                  Map<String, dynamic> msgMap = {
                    "messages": newMsgLog,
                    //"dateStamp": DateFormat.yMMMd().format(DateTime.now()),
                    "timeStamp": DateTime.now()
                  };
                  FirebaseFirestore.instance.collection(groupId).doc(stallId).collection("messages").doc("messages")
                      .update(msgMap);
                }
                // same timing
                else{newMsgLog = value["messages"] + "\n" + "  " + userName + ": " + msgInput;
                FirebaseFirestore.instance.collection(groupId).doc(stallId).collection("messages").doc("messages")
                    .update({"messages": newMsgLog});
                }
              }

              else {
                // different day
                //print ("2");
                newMsgLog = value["messages"] + '\n' + '\n' +
                    DateFormat.yMMMd().format(DateTime.now()).toString() + '\n' +
                    '--------------'+ '\n' + DateFormat('HH:mm').format(DateTime.now()).toString()
                    + "\n" + "  " + userName + ": " + msgInput;
                Map<String, dynamic> msgMap = {
                  "messages": newMsgLog,
                  "dateStamp": DateFormat.yMMMd().format(DateTime.now()),
                  "timeStamp": DateTime.now()
                };

                FirebaseFirestore.instance.collection(groupId).doc(stallId).collection("messages").doc("messages")
                    .update(msgMap);
              }
            }

            else {
              // dateStamp is null
              //print ("3");
              newMsgLog = value["messages"] + '\n' + '\n' +
                  DateFormat.yMMMd().format(DateTime.now()).toString() + '\n' +
                  '--------------' + '\n' + DateFormat('HH:mm').format(DateTime.now()).toString()
                  + "\n" + "  " + userName + ": " + msgInput;
              Map<String, dynamic> msgMap = {
                "messages": newMsgLog,
                "dateStamp": DateFormat.yMMMd().format(DateTime.now()),
                "timeStamp": DateTime.now()
              };

              FirebaseFirestore.instance.collection(groupId).doc(stallId).collection("messages").doc("messages")
                  .update(msgMap);
            }
          });
        }
        else{
          // no messages doc at all
          newMsgLog =
              DateFormat.yMMMd().format(DateTime.now()).toString() + '\n' +
                  '--------------'+ '\n' + DateFormat('HH:mm').format(DateTime.now()).toString()
                  + "\n" + "  " + userName + ": " + msgInput;
          Map<String, dynamic> msgMap = {
            "messages": newMsgLog,
            "dateStamp": DateFormat.yMMMd().format(DateTime.now()),
            "timeStamp": DateTime.now()
          };

          FirebaseFirestore.instance.collection(groupId).doc(stallId).collection("messages").doc("messages")
              .set(msgMap);

        }
        getMsgList();
        //setState(() {inputChatMsg.clear();});
        //}

        setState(() {inputChatMsg.clear();});

      });

      ///// open this for notification activation ///////////////////////
      Map<String, dynamic> triggerMap = {
        "groupId": groupId, //whatUse
        "stall": stall,
        "stallId": stallId,
        "food": food,
        "place": place,
        "qty": qty,
        "remark": remark,
        "image": image,
        "index": index,
        "jobRefNo": jobRefNo,
      };
      ///////////////////// to open up this line below inorder to send notification trigger
      await FirebaseFirestore.instance.collection("NotificationTrigger").doc().set(triggerMap);

      //must get all members email here first, then update all other members email's mailbox with state = 1

      // when i exit from this page, my mailbox to be set to state =0
      // at Food if my mailbox state = 1 then red
      for (int x = 0; x < mCount; x++) {
        if (memberEmail[x] != myEmail) {
          FirebaseFirestore.instance.collection(groupId).doc(stallId).collection(
              "mailBox").doc(memberEmail[x])
              .set({"gotMail": 1});
        }
      }
      //FirebaseFirestore.instance.collection(groupId).doc(stallId).update({"msgIncoming": 1}); // << no need
      // >>>>>> also register msg sender here // << no need
    }

    updateQuotes(msgInput)async{
      // todone: update the condCode here when stage change. which its array is cus+"ARN" and stage+"ARN" (done)
      // todone: if since is archived, bring back to become not Archived? (yes)
      if (food == food0){
        await FirebaseFirestore.instance.collection(groupId).doc(stallId)
            .update({"quotes": msgInput});
        //await getQuotes();  // todone: i think there is no need to get quotes here. it makes the quoteToDisplay jump to base quotes0
        await quoteCompletedCheck ();
        //print ("quoteNotCOmpleted:    " + quoteNotCompleted.toString());
        if (stageCurrent<2 && quoteNotCompleted != 1){ // todone: ok the only purpose is to see if all quotes are completed for multi parts situation
          await FirebaseFirestore.instance.collection(groupId).doc(stallId).update({"stage": 2}); // todone: so one way is to make the getQuotes conducts quoteToDisplay pulling only once
          FirebaseFirestore.instance.collection(groupId).doc(stallId).update({"poStatus": "Quoted"}); //todone (adopted): or even better just do a loop to see if all quote[x] existied to see if quotes completed, instead of doing the getQuotes again!!
          FirebaseFirestore.instance.collection(groupId).doc(stallId).update({"condCode": [ custCode+"ARN", "2ARN" ]});
        } // only if stageCurrent < 2
        quotes0 = msgInput;
        }

      if (food == pnMore[0]){
        await FirebaseFirestore.instance.collection(groupId).doc(stallId).collection("moreParts").doc(pnMore[0])
            .update({"quotes": msgInput});
        //await getQuotes();
        await quoteCompletedCheck ();
        if (stageCurrent<2 && quoteNotCompleted != 1){
          await FirebaseFirestore.instance.collection(groupId).doc(stallId).update({"stage": 2});
          FirebaseFirestore.instance.collection(groupId).doc(stallId).update({"poStatus": "Quoted"});
          FirebaseFirestore.instance.collection(groupId).doc(stallId).update({"condCode": [ custCode+"ARN", "2ARN" ]});
          //await FirebaseFirestore.instance.collection(groupId).doc(stallId).collection("moreParts").doc(pnMore[0]).update({"stage": 2});
        } // only if stageCurrent < 2
        quotes[0] = msgInput;
      }

      if (food == pnMore[1]){
        await FirebaseFirestore.instance.collection(groupId).doc(stallId).collection("moreParts").doc(pnMore[1])
            .update({"quotes": msgInput});
        //await getQuotes();
        await quoteCompletedCheck ();
        if (stageCurrent<2 && quoteNotCompleted != 1){
          await FirebaseFirestore.instance.collection(groupId).doc(stallId).update({"stage": 2});
          FirebaseFirestore.instance.collection(groupId).doc(stallId).update({"poStatus": "Quoted"});
          FirebaseFirestore.instance.collection(groupId).doc(stallId).update({"condCode": [ custCode+"ARN", "2ARN" ]});
          //await FirebaseFirestore.instance.collection(groupId).doc(stallId).collection("moreParts").doc(pnMore[1]).update({"stage": 2});
        } // only if stageCurrent < 2
        quotes[1] = msgInput;
      }

      if (food == pnMore[2]){
        await FirebaseFirestore.instance.collection(groupId).doc(stallId).collection("moreParts").doc(pnMore[2])
            .update({"quotes": msgInput});
        //await getQuotes();
        await quoteCompletedCheck ();
        if (stageCurrent<2 && quoteNotCompleted != 1){
          await FirebaseFirestore.instance.collection(groupId).doc(stallId).update({"stage": 2});
          FirebaseFirestore.instance.collection(groupId).doc(stallId).update({"poStatus": "Quoted"});
          FirebaseFirestore.instance.collection(groupId).doc(stallId).update({"condCode": [ custCode+"ARN", "2ARN" ]});
          //await FirebaseFirestore.instance.collection(groupId).doc(stallId).collection("moreParts").doc(pnMore[2]).update({"stage": 2});
        } // only if stageCurrent < 2
        quotes[2] = msgInput;
      }

      if (food == pnMore[3]){
        await FirebaseFirestore.instance.collection(groupId).doc(stallId).collection("moreParts").doc(pnMore[3])
            .update({"quotes": msgInput});
        //await getQuotes();
        await quoteCompletedCheck ();
        if (stageCurrent<2 && quoteNotCompleted != 1){
          await FirebaseFirestore.instance.collection(groupId).doc(stallId).update({"stage": 2});
          FirebaseFirestore.instance.collection(groupId).doc(stallId).update({"poStatus": "Quoted"});
          FirebaseFirestore.instance.collection(groupId).doc(stallId).update({"condCode": [ custCode+"ARN", "2ARN" ]});
          //await FirebaseFirestore.instance.collection(groupId).doc(stallId).collection("moreParts").doc(pnMore[3]).update({"stage": 2});
        } // only if stageCurrent < 2
        quotes[3] = msgInput;
      }




    }




    void goPictures(BuildContext context)async{

      final result =
      await Navigator.push(context, MaterialPageRoute(builder: (context) => Pictures(
        theIndex: index,
        theStallId: stallId,
        theStallIdNo: stallIdNo,
        theGroupId : groupId,
        //theImage: snapshot.data[index].data['image'],
        theStall :stall,
        theFood: food,
        //thePlace: snapshot.data[index].data['whatUse'],
        //theRemark: snapshot.data[index].data['remark'],
        //theAddress: snapshot.data[index].data['address'],
      )));
      //ScaffoldMessenger.of(context)..removeCurrentSnackBar()..showSnackBar(SnackBar(content: Text('$result')));
      //Toast.show(result, context, duration: Toast.LENGTH_LONG, gravity: Toast.BOTTOM);
      if (result == 'Y'){writeData("New picture added");}
    }


    void goViewPO(BuildContext context)async{
      final result =
      await Navigator.push(context, MaterialPageRoute(builder: (context) => ViewPO(
          thePoUrl: poUrl, theMyEmail: myEmail, theGroupId: groupId, theStallId: stallId
      )));

      if (result == 1){
        await writeData("PO just approved");
        setState(() {poStatus = "approved";});
        //Navigator.push(context, MaterialPageRoute(builder: (context) => ViewPO())); // come here to write PO approved data to firebase then just to go back again to show approving manager the status at PO.pdf pagethePoUrl: poUrl, theMyEmail: myEmail, theGroupId: groupId, theStallId: stallId
      }
    }

    goBuy()async{


      FirebaseFirestore.instance.collection(groupId).doc(stallId).update({"stage": 3});
      FirebaseFirestore.instance.collection(groupId).doc(stallId).update({"poStatus": "pending approval"});
      FirebaseFirestore.instance.collection(groupId).doc(stallId).update({"condCode": [ custCode+"ARN", "3ARN" ]});

      //print (toCart0.toString() + " " + toCart[0].toString() + " " + toCart[1].toString());
      //print(food0 + " " + pnMore[0] + " " + pnMore[1]);

      /*
      String msg = "Please approve the buy for: ";
      if (toCart0 == true){toBuyPN = msg + "\n" + "          " + food0;}
      if (toCart[0] == true){toBuyPN0 = toBuyPN + "\n" + "          " + pnMore[0];}
      if (toCart[1] == true){toBuyPN1 = toBuyPN0 + "\n" + "          " + pnMore[1];}
      if (toCart[2] == true){toBuyPN2 = toBuyPN1 + "\n" + "          " + pnMore[2];}
      if (toCart[3] == true){toBuyPN3 = toBuyPN2 + "\n" + "          " + pnMore[3];}

       */
      if (multipleParts == 1) {
        if (toCart0 == true) {
          toBuyPN = food0;
        } else {
          toBuyPN = "-";
        }
        if (toCart[0] == true) {
          toBuyPN0 = pnMore[0];
        } else {
          toBuyPN0 = "-";
        }
        if (toCart[1] == true) {
          toBuyPN1 = pnMore[1];
        } else {
          toBuyPN1 = "-";
        }
        if (toCart[2] == true) {
          toBuyPN2 = pnMore[2];
        } else {
          toBuyPN2 = "-";
        }
        if (toCart[3] == true) {
          toBuyPN3 = pnMore[3];
        } else {
          toBuyPN3 = "-";
        }
        String line1; String line2; String line3; String line4; String line5;
        if (toBuyPN=="-"){line1 = "";}else{line1 = "\n" + "          " + toBuyPN;}
        if (toBuyPN0=="-"){line2 = "";}else{line2 = "\n" + "          " + toBuyPN0;}
        if (toBuyPN1=="-"){line3 = "";}else{line3 = "\n" + "          " + toBuyPN1;}
        if (toBuyPN2=="-"){line4 = "";}else{line4 = "\n" + "          " + toBuyPN2;}
        if (toBuyPN3=="-"){line5 = "";}else{line5 = "\n" + "          " + toBuyPN3;}

        writeData(
            "Please approve the buy for: " +
                line1 +
                line2 + line3 +
                line4 + line5
        );
        /*
        writeData(
            "Please approve the buy for: " +
                "\n" + "          " + toBuyPN +
                "\n" + "          " + toBuyPN0 + "\n" + "          " + toBuyPN1 +
                "\n" + "          " + toBuyPN2 + "\n" + "          " + toBuyPN3);
        */


        //print (toBuyPN3);
        //writeData(toBuyPN3);
        //print ("pnMore[0]:  " + pnMore[0]);

        /*
      if (toCart[4]!= "") {
        writeData("Please approve the buy for: " + "\n" + "          " + food0 +
            "\n" + "          " + pnMore[0] + "\n" + "          " + pnMore[1] +
            "\n" + "          " + pnMore[2] + "\n" + "          " + pnMore[3] +
            "\n" + "          " + pnMore[4]);
      }
      else {
        if (toCart[3] != "") {
          writeData(
              "Please approve the buy for: " + "\n" + "          " + food0 +
                  "\n" + "          " + pnMore[0] + "\n" + "          " +
                  pnMore[1] +
                  "\n" + "          " + pnMore[2] + "\n" + "          " +
                  pnMore[3]);
        }
        else {
          if (toCart[2] != "") {
            writeData(
                "Please approve the buy for: " + "\n" + "          " + food0 +
                    "\n" + "          " + pnMore[0] + "\n" + "          " +
                    pnMore[1] +
                    "\n" + "          " + pnMore[2]);
          }
          else {
            if (toCart[1] != "") {
              writeData(
                  "Please approve the buy for: " + "\n" + "          " + food0 +
                      "\n" + "          " + pnMore[0] + "\n" + "          " +
                      pnMore[1]);
            } else {
              if (toCart[0] != "") {
                writeData("Please approve the buy for: " + "\n" + "          " +
                    food0 +
                    "\n" + "          " + pnMore[0]);
              } else {
                if (toCart0 != "") {
                  writeData(
                      "Please approve the buy for: " + "\n" + "          " +
                          food0);
                }
              }
            }
          }
        }
      }
      */
      }else{writeData(
          "Please approve the buy for: " + "\n" + "          " +
              food0);}

      Toast.show("PO submitted for approval...", context, duration: Toast.LENGTH_LONG, gravity: Toast.TOP);
      setState(() {stageCurrent=3;});
    }

    buyApprove()async{
      // do the PO approve proceedings
      // todone: log in PO to be Accpac'ed somewhere


      //FirebaseFirestore.instance.collection(groupId).doc(stallId).collection("moreParts").doc(pnMore[3]).update({"quotes": msgInput});
      await FirebaseFirestore.instance.collection(groupId).doc(stallId)
          .get().then((value) {
        poQuote0 = value["quotes"];
      });

      int q =0;
      await FirebaseFirestore.instance.collection(groupId).doc(stallId).collection('moreParts').orderBy("whatPN", descending: true)
          .get().then((moreParts){
        if (moreParts.docs.length >0){
          //print ("doclength:   " + moreParts.docs.length.toString());
          moreParts.docs.forEach((part) {
            //print ("moreParts: " + part["whatPN"]);
            poQuote[q] = part["quotes"];
            q++;
          });
        }
      });

      if (multipleParts != 1) {toBuyPN = food0;}
      Map<String, dynamic> poMap = {
        "jobRefNo": jobRefNo,  // and perhaps the stallId also? (ok)
        "stallId": stallId,

        "qty0": qty0,
        "qtyMore1": qtyMore[0],
        "qtyMore2": qtyMore[1],
        "qtyMore3": qtyMore[2],
        "qtyMore4": qtyMore[3],

        //"price": quoteToDisplay,
        "price0": poQuote0,
        "price1": poQuote[0],
        "price2": poQuote[1],
        "price3": poQuote[2],
        "price4": poQuote[3],

        "partNo": toBuyPN, // tobuyPN is "-" means not PO'ing
        "partNo1": toBuyPN0,
        "partNo2": toBuyPN1,
        "partNo3": toBuyPN2,
        "partNo4": toBuyPN3,

        "remark0" : remark0,
        "remark1" : remarkMore[0],
        "remark2" : remarkMore[1],
        "remark3" : remarkMore[2],
        "remark4" : remarkMore[3],

        "vendor": "RL-Int",
        "poUploaded": "no",
        "poNumber": stallId.substring(1,17).toUpperCase(),
        "date": DateFormat('yyyy-MM-dd').format(DateTime.now()).toString()
      };
      FirebaseFirestore.instance.collection(groupId).doc("UnIssuedPO").collection("UnIssuedPO").doc(stallId).set(poMap);
      //FirebaseFirestore.instance.collection(groupId).doc("UnIssuedPO").collection("UnIssuedPO").doc().set({"vendor": "yuanQiang"});

      FirebaseFirestore.instance.collection(groupId).doc(stallId)
          .update({"poStatus": "approved", "poApproveDate": DateTime.now(), "stage": 4});
      FirebaseFirestore.instance.collection(groupId).doc(stallId).update({"condCode": [ custCode+"ARN", "4ARN" ]});
      stageCurrent = 4;
      poStatus = "approved";
      writeData("Buy approved. Go ahead.");
      Toast.show("PO approved", context, duration: Toast.LENGTH_LONG, gravity: Toast.TOP);
      //justApproved = 1;
      setState(() {poStatus = "approved";});
      //Navigator.pop(context, justApproved);
    }


    void overflowSelected(String choice) {
      if (choice == OverflowBtn.noneClick) {
        FirebaseFirestore.instance.collection(groupId).doc(stallId)
            .update({"finalStatus": ""});
      }
      if (choice == OverflowBtn.closedClick) {
        FirebaseFirestore.instance.collection(groupId).doc(stallId)
            .update({"finalStatus": "Closed"});
      }
      if (choice == OverflowBtn.replacementClick) {
        FirebaseFirestore.instance.collection(groupId).doc(stallId)
            .update({"finalStatus": "Replacement"});
      }
      if (choice == OverflowBtn.pendingPartsClick) {
        FirebaseFirestore.instance.collection(groupId).doc(stallId)
            .update({"finalStatus": "Pending for Parts"});
      }
      if (choice == OverflowBtn.pendingBsConfirmClick) {
        FirebaseFirestore.instance.collection(groupId).doc(stallId)
            .update({"finalStatus": "Pending HS/BS Confirmation"});
      }
      if (choice == OverflowBtn.underRepairClick) {
        FirebaseFirestore.instance.collection(groupId).doc(stallId)
            .update({"finalStatus": "Under Repair"});
      }
      if (choice == OverflowBtn.forCollectionClick) {
        FirebaseFirestore.instance.collection(groupId).doc(stallId)
            .update({"finalStatus": "Pending Collection"});
      }
      if (choice == OverflowBtn.othersClick) {
        FirebaseFirestore.instance.collection(groupId).doc(stallId)
            .update({"finalStatus": "Others"});
      }
    }




    return Scaffold(
        resizeToAvoidBottomInset: true, // todo: open this up to avoid horizontal view overflow

        //backgroundColor: Colors.grey,
        appBar: AppBar(
          //automaticallyImplyLeading: true,

            leading: IconButton(
                icon: Icon(
                  Icons.arrow_back_ios,
                  size: 20,
                ),
                onPressed: () {
                  // >>>>>>>create a function here to determine if you are the sender, if not, replace the sender name
                  quitAction();
                  //Navigator.pushReplacement(context, MaterialPageRoute(builder: (context) => Food(thePageTitle: pageTitle, theGroupId: groupId, theStallIndex: index)));
                }),

            title: (Text ("Edit and Chat")),
            //backgroundColor: Colors.grey,

            actions: [
              //GestureDetector(onTap: () { ok();}, child: Padding(padding: const EdgeInsets.fromLTRB(0,12,20,10), child: Text("ok", style: TextStyle(fontSize: 20),),)),
            ]

        ),

        body:
        Column(
          //crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              multipleParts == 1 ?
              Column(
                //crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  SizedBox(height: 20),

                  Wrap(
                      alignment: WrapAlignment.spaceBetween,
                      direction: Axis.horizontal,
                    spacing: 1,

                    //crossAxisAlignment: CrossAxisAlignment.stretch,

                    children: [
                      //SizedBox(width: 10),

                      //Padding(
                      //  padding: const EdgeInsets.fromLTRB(3,3,0,0),
                      //  child: Icon(Icons.circle_outlined, color: Colors.blue, size: 15.0,),
                      //),
                      GestureDetector(onTap: (){foodPicked();},
                      //child: Container(margin: const EdgeInsets.fromLTRB(0,0,20,7), padding: const EdgeInsets.all(3.0),decoration: BoxDecoration(border: Border.all(color: Colors.blueAccent)),
                          child:
                          Row(
                            children: [
                              Padding(
                                padding: const EdgeInsets.fromLTRB(10,7,40,7),
                                child:
                                pnPick == true?
                                Text(food0, style: TextStyle(color: Colors.blue, fontSize: 15, fontWeight: FontWeight.bold,)):
                                Text(food0, style: TextStyle(color: Colors.grey, fontSize: 15, fontWeight: FontWeight.bold,))
                              ),

                              Container(
                                height: 25,
                                child: ToggleButtons(
                                  fillColor: Colors.deepOrange[100],
                                  borderRadius: BorderRadius.circular(8.0),
                                  children:[
                                    //Text("buy"),Text("wait"),
                                    Icon(Icons.shopping_cart, color: Colors.blue, size: 17.0,),
                                    Icon(Icons.clear, color: Colors.blue, size: 17.0,)],
                                  onPressed: (int index) {
                                    if (stageCurrent < 3){ // allow to change buy option only before clicking 'goBuy' approval
                                    //print ("length " + isSelected1.length.toString());
                                    //print ("index:  " + index.toString());
                                    for (int i = 0; i < isSelected.length; i++) {
                                      //i==index? isSelected[i] = true: isSelected[i]=false;
                                      isSelected[i] = i == index; // was this orginally and also works, juz that i dont understand its logic
                                      //print ("isSelected" + i.toString() + "  " + isSelected[i].toString());
                                      //isSelected[i] = !isSelected[i]; // this is a pure toggle, 1 become 0, 0 become 1 when you press any button, not what i wanted
                                      //print ("isSelected1:   " + isSelected1[0].toString() + "  " + isSelected1[1].toString());
                                    }
                                    if (isSelected[0]){updateCart(-1,true);} else{updateCart(-1,false);}
                                    //if (isSelected1[0]){} else{}
                                    //print ("isSelected1 out:   " + isSelected1[0].toString() + "  " + isSelected1[1].toString());
                                    //setState(() {});
                                    //print (isSelected);
                                    setState(() { //turn this on and toggle change will instantly happen. Actually dont turn also can
                                      //isSelected; //but slow and sometime slow untill like not responding. Not sure why
                                    }); // so I just turned it on
                                    }},
                                  isSelected: isSelected,
                                ),
                              )


                            ],
                          )
                      //)
                      ),

                      //SizedBox(width: 10),


                      //Padding(
                      //  padding: const EdgeInsets.fromLTRB(3,3,0,0),
                      //  child: Icon(Icons.circle_outlined, color: Colors.blue, size: 15.0,),
                      //),
                      pnMore[0]!= ""?
                      GestureDetector(onTap: (){pn0Picked();},
                      child:
                      //Container(margin: const EdgeInsets.fromLTRB(0,0,0,7),padding: const EdgeInsets.all(3.0),decoration: BoxDecoration(border: Border.all(color: Colors.blueAccent)),
                          Row(
                            children: [
                              Padding(
                                padding: const EdgeInsets.fromLTRB(10,7,40,7),
                                child:
                                pnPick0 == true?
                                Text (pnMore[0], style: TextStyle(color: Colors.blue, fontSize: 15, fontWeight: FontWeight.bold,)):
                                Text (pnMore[0], style: TextStyle(color: Colors.grey, fontSize: 15, fontWeight: FontWeight.bold,))
                              ),
                              //Icon(Icons.circle_outlined, color: Colors.blue, size: 15.0,),

                              Container(
                                height: 25,
                                child: ToggleButtons(
                                  fillColor: Colors.deepOrange[100],
                                  borderRadius: BorderRadius.circular(8.0),
                                  children:[
                                    //Text("buy"),Text("wait"),
                                    Icon(Icons.shopping_cart, color: Colors.blue, size: 17.0,),
                                    Icon(Icons.clear, color: Colors.blue, size: 17.0,)],
                                  onPressed: (int index) {
                                    if (stageCurrent < 3){ // allow to change buy option only before clicking 'goBuy' approval
                                    //print ("length " + isSelected1.length.toString());
                                    for (int i = 0; i < isSelected0.length; i++) {
                                      //i==index? isSelected[i] = true: isSelected[i]=false;
                                      isSelected0[i] = i == index;
                                      //print ("isSelected" + i.toString() + "  " + isSelected1[i].toString());
                                      //isSelected[i] = !isSelected[i];
                                      //print ("isSelected1:   " + isSelected1[0].toString() + "  " + isSelected1[1].toString());
                                    }
                                    if (isSelected0[0]){updateCart(0,true);} else{updateCart(0,false);}
                                    //if (isSelected0[0]){} else{}
                                    //print ("isSelected0 out:   " + isSelected0[0].toString() + "  " + isSelected0[1].toString());
                                    setState(() {});
                                  }},
                                  isSelected: isSelected0,
                                ),
                              )


                            ],
                          )
                      //)

                      )

                          :Text(""),
                      //SizedBox(width: 10),

                      //Padding(
                      //  padding: const EdgeInsets.fromLTRB(3,3,0,0),
                      //  child: Icon(Icons.circle_outlined, color: Colors.blue, size: 15.0,),
                      //),
                      pnMore[1]!= ""?
                      GestureDetector(onTap: (){pn1Picked();},
                          child:
                          //Container(margin: const EdgeInsets.fromLTRB(0,0,0,7),padding: const EdgeInsets.all(3.0),decoration: BoxDecoration(border: Border.all(color: Colors.blueAccent)),
                              Row(
                                children: [
                                  Padding(
                                    padding: const EdgeInsets.fromLTRB(10,7,40,7),
                                    child:
                                    pnPick1 == true?
                                    Text (pnMore[1], style: TextStyle(color: Colors.blue, fontSize: 15, fontWeight: FontWeight.bold,)):
                                    Text (pnMore[1], style: TextStyle(color: Colors.grey, fontSize: 15, fontWeight: FontWeight.bold,))
                                  ),
                                  Container(
                                    height: 25,
                                    child: ToggleButtons(
                                      fillColor: Colors.deepOrange[100],
                                      borderRadius: BorderRadius.circular(8.0),
                                      children:[
                                      //Text("buy"),Text("wait"),
                                      Icon(Icons.shopping_cart, color: Colors.blue, size: 17.0,),
                                      Icon(Icons.clear, color: Colors.blue, size: 17.0,)],
                                      onPressed: (int index) {
                                      if (stageCurrent < 3){ // allow to change buy option only before clicking 'goBuy' approval
                                        //print ("length " + isSelected1.length.toString());
                                        for (int i = 0; i < isSelected1.length; i++) {
                                          //i==index? isSelected[i] = true: isSelected[i]=false;
                                          isSelected1[i] = i == index;
                                          //print ("isSelected" + i.toString() + "  " + isSelected1[i].toString());
                                          //isSelected[i] = !isSelected[i];
                                          //print ("isSelected1:   " + isSelected1[0].toString() + "  " + isSelected1[1].toString());
                                        }
                                        if (isSelected1[0]){updateCart(1,true);} else{updateCart(1,false);}
                                        //if (isSelected1[0]){} else{}
                                        //print ("isSelected1 out:   " + isSelected1[0].toString() + "  " + isSelected1[1].toString());
                                        setState(() {});
                                      }},
                                      isSelected: isSelected1,
                                      ),
                                  )
                                  //ToggleButtons(onPressed: (int x){buy1 == true? buy1 = false:buy1=true;setState(() {bool buy1;});})
                                ],
                              )
                          //)
                      )
                              :Text(""),



                      //SizedBox(width: 10),

                      //Padding(
                      //  padding: const EdgeInsets.fromLTRB(3,3,0,0),
                      //  child: Icon(Icons.circle_outlined, color: Colors.blue, size: 15.0,),
                      //),
                      pnMore[2]!= ""?
                      GestureDetector(onTap: (){pn2Picked();},
                          child:
                          //Container(margin: const EdgeInsets.fromLTRB(0,0,0,7),padding: const EdgeInsets.all(3.0),decoration: BoxDecoration(border: Border.all(color: Colors.blueAccent)),
                              Row(
                                children: [
                                  Padding(
                                    padding: const EdgeInsets.fromLTRB(10,7,40,7),
                                    child:
                                    pnPick2 == true?
                                    Text (pnMore[2], style: TextStyle(color: Colors.blue, fontSize: 15, fontWeight: FontWeight.bold,)):
                                    Text (pnMore[2], style: TextStyle(color: Colors.grey, fontSize: 15, fontWeight: FontWeight.bold,))
                                  ),

                                  Container(
                                    height: 25,
                                    child: ToggleButtons(
                                      fillColor: Colors.deepOrange[100],
                                      borderRadius: BorderRadius.circular(8.0),
                                      children:[
                                        //Text("buy"),Text("wait"),
                                        Icon(Icons.shopping_cart, color: Colors.blue, size: 17.0,),
                                        Icon(Icons.clear, color: Colors.blue, size: 17.0,)],
                                      onPressed: (int index) {
                                      if (stageCurrent < 3){ // allow to change buy option only before clicking 'goBuy' approval
                                        //print ("length " + isSelected1.length.toString());
                                        for (int i = 0; i < isSelected2.length; i++) {
                                          //i==index? isSelected[i] = true: isSelected[i]=false;
                                          isSelected2[i] = i == index;
                                          //print ("isSelected" + i.toString() + "  " + isSelected1[i].toString());
                                          //isSelected[i] = !isSelected[i];
                                          //print ("isSelected1:   " + isSelected1[0].toString() + "  " + isSelected1[1].toString());
                                        }
                                        if (isSelected2[0]){updateCart(2,true);} else{updateCart(2,false);}
                                        //if (isSelected1[0]){} else{}
                                        //print ("isSelected1 out:   " + isSelected1[0].toString() + "  " + isSelected1[1].toString());
                                        setState(() {});
                                      }},
                                      isSelected: isSelected2,
                                    ),
                                  )



                                ],
                              )
                          //)



                            )
                              :Text(""),

                      //SizedBox(width: 10),

                      //Padding(
                      //  padding: const EdgeInsets.fromLTRB(3,3,0,0),
                      //  child: Icon(Icons.circle_outlined, color: Colors.blue, size: 15.0,),
                      //),
                      pnMore[3]!= ""?
                      GestureDetector(onTap: (){pn3Picked();},
                          child:
                          //Container(margin: const EdgeInsets.fromLTRB(0,0,0,7),padding: const EdgeInsets.all(3.0),decoration: BoxDecoration(border: Border.all(color: Colors.blueAccent)),
                              Row(
                                children: [
                                  Padding(
                                    padding: const EdgeInsets.fromLTRB(10,7,40,7),
                                    child:
                                    pnPick3 == true?
                                    Text (pnMore[3], style: TextStyle(color: Colors.blue, fontSize: 15, fontWeight: FontWeight.bold,)):
                                    Text (pnMore[3], style: TextStyle(color: Colors.grey, fontSize: 15, fontWeight: FontWeight.bold,))
                                  ),
                                  Container(
                                    height: 25,
                                    child: ToggleButtons(
                                      fillColor: Colors.deepOrange[100],
                                      borderRadius: BorderRadius.circular(8.0),
                                      children:[
                                        //Text("buy"),Text("wait"),
                                        Icon(Icons.shopping_cart, color: Colors.blue, size: 17.0,),
                                        Icon(Icons.clear, color: Colors.blue, size: 17.0,)],
                                      onPressed: (int index) {
                                      if (stageCurrent < 3){ // allow to change buy option only before clicking 'goBuy' approval
                                        //print ("length " + isSelected1.length.toString());
                                        for (int i = 0; i < isSelected3.length; i++) {
                                          //i==index? isSelected[i] = true: isSelected[i]=false;
                                          isSelected3[i] = i == index;
                                          //print ("isSelected" + i.toString() + "  " + isSelected1[i].toString());
                                          //isSelected[i] = !isSelected[i];
                                          //print ("isSelected1:   " + isSelected1[0].toString() + "  " + isSelected1[1].toString());
                                        }
                                        if (isSelected3[0]){updateCart(3,true);} else{updateCart(3,false);}
                                        //if (isSelected1[0]){} else{}
                                        //print ("isSelected1 out:   " + isSelected1[0].toString() + "  " + isSelected1[1].toString());
                                        setState(() {});
                                      }},
                                      isSelected: isSelected3,
                                    ),
                                  )



                                ],
                              )
                          //)
                        )
                              :Text("")
                  ]


                  ),
                  //SizedBox(height:10),
                  Divider(color: Colors.black,)
                ])

                  :Text(""),



        Column(
        //crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
              // image and info
              Row(
                children: [
                  Expanded(flex:1,
                    child: GestureDetector(
                      onTap: (){
                        goPictures(context);
                      },
                      onLongPress: () {if (userId == whoUploadId || myEmail == whoUploadId) captureImage(ImageSource.gallery);
                      },
                      child: Padding(
                          padding: const EdgeInsets.fromLTRB(8,0,10,0),
                          child: ClipRRect(
                              borderRadius: BorderRadius.circular(30.0),
                              child: imageNew == null?

                              image != "" && image != null?
                              Image.network(image, alignment: Alignment.center, width: 120, height: 120)
                              : Image.asset("assets/parts.png", fit: BoxFit.fitWidth, width: 200, height: 100,)

                                  : Image.network(imageNew, alignment: Alignment.center, width: 120, height: 120,)
                            //child: imageNew == null? Image.network(image, fit: BoxFit.fill): Image.network(imageNew, fit: BoxFit.fill)
                          )
                      ),
                    ),
                  ),


                  Expanded(flex: 2,
                    child: Column(
                      children: [

                        userId == whoUploadId || myEmail == whoUploadId?
                        Row(
                          children: [
                            Expanded(flex:1,child: Text ("job :", style: TextStyle(color:Colors.blueGrey, fontSize: 12))),
                            Expanded(flex:6,
                              child: TextField(
                                style:
                                TextStyle(fontSize: 13, color: Colors.blue),
                                controller: inputWhatJob, //this will insert the test into field for edit
                                keyboardType: TextInputType.multiline,
                                maxLength: null,
                                maxLines: null,
                                decoration: InputDecoration(
                                    isDense: true,
                                    contentPadding: EdgeInsets.fromLTRB(0, 8, 0, 8)
                                  //hintText: "the stall: " + stall, //without the controller, you can insert this hint, but then not editable
                                  //hintStyle: TextStyle(
                                  //    fontSize: 10,
                                  //    color: Colors.grey[400],
                                  //    fontStyle: FontStyle.italic),
                                ),
                              ),
                            ),
                          ],
                        ):
                        Padding(
                          padding: const EdgeInsets.fromLTRB(0,5,8,0),
                          child: Align(alignment: Alignment.centerLeft,
                            child: Text("job : " + jobRefNo,
                                //textAlign: TextAlign.center,
                                style:
                                TextStyle(fontSize: 13, color:Colors.blueGrey)),
                          ),
                        ),

                        userId == whoUploadId || myEmail == whoUploadId?
                        Row(
                          children: [
                            Expanded(flex:1,child: Text ("mdl :", style: TextStyle(color:Colors.blueGrey, fontSize: 12))),
                            Expanded(flex:6,
                              child: TextField(
                                style:
                                TextStyle(fontSize: 13, color: Colors.blue),
                                controller: inputWhatStall, //this will insert the test into field for edit
                                keyboardType: TextInputType.multiline,
                                maxLength: null,
                                maxLines: null,
                                decoration: InputDecoration(
                                    isDense: true,
                                    contentPadding: EdgeInsets.fromLTRB(0, 8, 0, 8)
                                  //hintText: "the stall: " + stall, //without the controller, you can insert this hint, but then not editable
                                  //hintStyle: TextStyle(
                                  //    fontSize: 10,
                                  //    color: Colors.grey[400],
                                  //    fontStyle: FontStyle.italic),
                                ),
                              ),
                            ),
                          ],
                        ):
                        Padding(
                          padding: const EdgeInsets.fromLTRB(0,5,8,0),
                          child: Align(alignment: Alignment.centerLeft,
                            child: Text("mdl : " + stall,
                                //textAlign: TextAlign.center,
                                style:
                                TextStyle(fontSize: 13, color:Colors.blueGrey)),
                          ),
                        ),

                        userId == whoUploadId || myEmail == whoUploadId?
                        Row(
                          children: [
                            Expanded(flex: 1, child: Text ("prn :", style: TextStyle (color:Colors.blueGrey, fontSize: 12))),
                            Expanded(flex: 6,
                              child: TextField(
                                style:
                                TextStyle(fontSize: 13, color: Colors.blue),
                                controller: inputWhatFood,
                                keyboardType: TextInputType.multiline,
                                maxLength: null,
                                maxLines: null,
                                decoration: InputDecoration(
                                    isDense: true,
                                    contentPadding: EdgeInsets.fromLTRB(0, 8, 0, 8)
                                  //hintText: "food: " + food,
                                  //hintStyle: TextStyle(
                                  //    fontSize: 10,
                                  //    color: Colors.grey[400],
                                  //    fontStyle: FontStyle.italic),
                                ),
                              ),
                            ),
                          ],
                        ):
                        Padding(
                          padding: const EdgeInsets.fromLTRB(0,5,8,0),
                          child: Align(alignment: Alignment.centerLeft,
                            child: Text("prn : " + food,
                                //textAlign: TextAlign.center,
                                style:
                                TextStyle(fontSize: 13, color:Colors.blueGrey)),
                          ),
                        ),

                        userId == whoUploadId || myEmail == whoUploadId?
                        Row(
                          children: [
                            Expanded(flex: 1, child: Text ("qty :", style: TextStyle(color:Colors.blueGrey, fontSize: 12))),
                            Expanded(flex: 6,
                              child: TextField(
                                style:
                                TextStyle(fontSize: 13, color: Colors.blue),
                                controller: inputWhatQty,
                                keyboardType: TextInputType.multiline,
                                maxLength: null,
                                maxLines: null,
                                decoration: InputDecoration(
                                    isDense: true,
                                    contentPadding: EdgeInsets.fromLTRB(0, 8, 0, 8)
                                  //hintText: "qty: " + qty,
                                  //hintStyle: TextStyle(
                                  //    fontSize: 10,
                                  //    color: Colors.grey[400],
                                  //    fontStyle: FontStyle.italic),
                                ),
                              ),
                            ),
                          ],
                        ):
                        Padding(
                          padding: const EdgeInsets.fromLTRB(0,5,8,0),
                          child: Align(alignment: Alignment.centerLeft,
                            child: Text("qty : " + qty,
                                //textAlign: TextAlign.center,
                                style:
                                TextStyle(fontSize: 13, color:Colors.blueGrey)),
                          ),
                        ),


                        userId == whoUploadId || myEmail == whoUploadId?
                        Row(
                          children: [
                            Expanded(flex:1, child: Text("whr :", style: TextStyle(color:Colors.blueGrey, fontSize: 12))),
                            Expanded(flex:6,
                              child: TextField(
                                style:
                                TextStyle(fontSize: 13, color: Colors.blue),
                                controller: inputWhere,
                                keyboardType: TextInputType.multiline,
                                maxLength: null,
                                maxLines: null,
                                decoration: InputDecoration(
                                    isDense: true,
                                    contentPadding: EdgeInsets.fromLTRB(0, 8, 0, 8)
                                ),
                              ),
                            ),
                          ],
                        ):
                        Padding(
                          padding: const EdgeInsets.fromLTRB(0,5,8,0),
                          child: Align(alignment: Alignment.centerLeft,
                            child: Text("whr : " + place,
                                style:
                                TextStyle(fontSize: 13, color:Colors.blueGrey)),
                          ),
                        ),



                      ],
                    ),
                  ),
                ],
              ),

              userId != whoUploadId && myEmail != whoUploadId? Divider(color: Colors.black,): Text(""),

              userId == whoUploadId || myEmail == whoUploadId? SizedBox(height: 0): SizedBox(height: 0),
              //remark
              Row(
                children: [
                  userId == whoUploadId || myEmail == whoUploadId?
                  Expanded (flex: 8,
                    child: Padding(
                      padding: const EdgeInsets.fromLTRB(20, 0, 0, 0),
                      child: Row(
                        children: [
                          Expanded(flex: 1, child: Text ("dsc :", style: TextStyle(color:Colors.blueGrey, fontSize: 12))),
                          Expanded(flex: 6,
                            child: TextField(
                              style: TextStyle(fontSize: 13, color: Colors.blue),
                              controller: inputRemark,
                              keyboardType: TextInputType.multiline,
                              maxLength: null,
                              maxLines: null,
                              decoration: InputDecoration(
                                  isDense: true,
                                  contentPadding: EdgeInsets.fromLTRB(0, 8, 0, 8)
                                //hintText: remark,
                                //hintStyle: TextStyle(
                                //    fontSize: 15,
                                //    color: Colors.grey[400],
                                //    fontStyle: FontStyle.italic),
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),
                  ):
                  Expanded(flex:1,
                    child: Padding(
                      padding: const EdgeInsets.fromLTRB(20,0,8,0),
                      child: Align(alignment: Alignment.centerLeft,
                        child: Text("Description : " + remark,
                            //textAlign: TextAlign.center,
                            style:
                            TextStyle(fontSize: 13, color:Colors.blueGrey, )),
                      ),
                    ),
                  ),

                  userId == whoUploadId || myEmail == whoUploadId?
                  Expanded(flex: 1,
                    child: GestureDetector(
                        onTap: () {
                          userId == whoUploadId || myEmail == whoUploadId? updateInfo():
                          Toast.show("You have not update right", context, duration: Toast.LENGTH_LONG, gravity: Toast.TOP);
                          //Toast.show(imageUrl, context, duration: Toast.LENGTH_LONG, gravity: Toast.BOTTOM);
                          ////////////////////////////////////////// wait need to at least validate email existed
                          //if (buttonTapped == false) {updateInfo();}
                          //setupFamilyGroup();
                        },
                        child: Padding(
                          padding: const EdgeInsets.fromLTRB(0,0,0,0),
                          child:  Icon(
                            Icons.upload,
                            color: Colors.blue,
                            size: 20.0,
                          ),
                        )),
                  ):
                  Text(""),
                ],),



              userId != whoUploadId && myEmail != whoUploadId? Divider(color: Colors.black,):Text(""),

              // price
              Row(
                children: [

                  Expanded(flex:5,
                    child: Padding(
                      padding: const EdgeInsets.fromLTRB(20,0,0,10),
                      child: Row (
                          children: [
                            Text ("Price:"),
                            SizedBox(width: 5),

                            quoteToDisplay != null?
                            Text (quoteToDisplay,
                              style: TextStyle(fontSize: 13, color: Colors.black),):
                            Text("-",
                              style: TextStyle(fontSize: 13, color: Colors.black),),

                            SizedBox(width:20),


                            poUrl == ""?


                            stageCurrent < 3?
                            GestureDetector(
                                onTap: () {goBuy();},
                                child:
                                Text("Go buy", style: TextStyle(fontWeight: FontWeight.bold, color: Colors.blue))
                                        )


                            //stageCurrent >= 3
                            :stageCurrent == 3?
                            GestureDetector(
                                onTap: () {
                                  myEmail == "ken@r-logic.com" || myEmail == "kenneth@r-logic.com"? buyApprove():
                                  Toast.show("You are not an authorizer", context, duration: Toast.LENGTH_LONG, gravity:  Toast.TOP);
                                  },
                                child:
                                Text("approve buy?", style: TextStyle(fontWeight: FontWeight.bold, color: Colors.blue))
                            ):

                              //stageCurrent >3
                            Text("BUY",
                                style: TextStyle(fontWeight: FontWeight.bold, color: Colors.black)
                            )



                            //poURL != ""
                            :GestureDetector(
                                onTap: () async {
                                  goViewPO(context);
                                },
                                child:
                                Text("PO",
                                    style: TextStyle(fontWeight: FontWeight.bold, color: Colors.blue)
                                )),

                            SizedBox(width:3),

                            poStatus != "approved"?
                            Text (""):
                            Text("APPROVED",
                                style: TextStyle(fontWeight: FontWeight.bold, color: Colors.black)
                            ),
                            //SizedBox (width: 20),
                          ]),
                    ),
                  ),

                  Expanded(flex:1,
                    child: PopupMenuButton<String>(
                      onSelected: overflowSelected,
                      itemBuilder: (BuildContext context) {
                        return OverflowBtn.choices.map((String choice) {
                          return PopupMenuItem<String>(
                            value: choice,
                            child: Text(choice),
                          );
                        }).toList();
                      },
                    ),
                  )





                ],
              ),
]),





              // message scroll and input
              Expanded(flex: 4,
                child: Container(
                  //height: 500,
                  //constraints: BoxConstraints.expand(),
                  height: MediaQuery.of(context).size.height,
                  //height: double.infinity,
                  child: Column(
                    children: [
                      Expanded(flex:8,
                        child: Align(alignment: Alignment.topLeft,
                          child: SingleChildScrollView(
                            //controller: _scrollController,
                            reverse: true,
                            scrollDirection: Axis.vertical, //.horizontal
                            //padding: const EdgeInsets.all(5.0),
                            child: Align(
                              alignment: Alignment.topLeft,
                              child: Padding(
                                padding:
                                const EdgeInsets.fromLTRB(20, 10, 20, 20),
                                child: newMsgLog != null
                                    ? Text(
                                  newMsgLog,
                                  style: TextStyle(
                                    color: Colors.grey,
                                  ),
                                  textAlign: TextAlign.left,
                                )
                                    : Text(""),
                              ),
                            ),
                          ),
                        ),
                      ),

                      // money icon


                      //input message
                      Row(
                        children: [

                          Expanded(flex:1,
                            child: GestureDetector(
                                onTap: () {

                                  if (inputChatMsg.text == ""){Text("");}
                                  else{ if (userId == whoUploadId || myEmail == whoUploadId) {Toast.show("You have no quoting right", context, duration: Toast.LENGTH_LONG, gravity: Toast.TOP);}
                                  else{
                                    //////////// todo: convert non curr quote to curr quote. add RMB as default infront?
                                    //String curr = "";
                                    // if input no currency, then curr  = "RMB", else curr = "". and add curr as a pre-scribe infront of quote.
                                    // ie curr +  inputChatMsg.text

                                    setState(() {checkCurr(inputChatMsg.text);});
                                    if (numFound == true) {
                                      quoteToDisplay = curr + " " + inputChatMsg.text.toUpperCase();
                                      //String curChk = quoteToDisplay.substring(0,3);
                                      //if (curChk != 'RMB' && curChk != 'SGD' && curChk != 'USD' && curChk != 'MYR' && curChk != 'INR' && curChk != 'IDR' && curChk != 'EUR'){
                                      //  curChk = "RMB";
                                      //  Toast.show("Currency not stated. RMB assumed", context, duration: Toast.LENGTH_LONG, gravity: Toast.TOP);
                                      //}
                                      partIndex == -1 ?
                                      quotes0 = curr + " " + inputChatMsg.text.toUpperCase() : quotes[partIndex] = curr + " " + inputChatMsg.text.toUpperCase(); // 2. put quotation to quotes[]

                                      // must it be setState(() {quotes[partIndex]}) ??????

                                      writeData(food + " quoted: " + curr + " " + inputChatMsg.text.toUpperCase());
                                      updateQuotes(curr + " " + inputChatMsg.text.toUpperCase()); // 3. go check if quotation are completed for all multi parts then update stage number and poStatus
                                    }
                                  }
                                  }
                                },
                                child: Padding(
                                  padding: const EdgeInsets.fromLTRB(8,0,0,0),
                                  child: Icon(
                                    Icons.money,
                                    color: Colors.blue,
                                    size: 30.0,
                                  ),
                                )),
                          ),



                          Expanded(flex: 12,
                            child: Padding(
                              padding: const EdgeInsets.fromLTRB(20, 0, 10, 0),
                              child: TextFormField(
                                style: TextStyle(color: Colors.blue),
                                controller: inputChatMsg,
                                keyboardType: TextInputType.multiline,
                                decoration: InputDecoration(
                                  border: InputBorder.none,
                                  hintText: "type your message here",
                                  hintStyle: TextStyle(
                                      fontSize: 15,
                                      color: Colors.grey[400],
                                      fontStyle: FontStyle.italic),
                                ),
                              ),
                            ),
                          ),

                          Expanded(flex: 3,
                            child: GestureDetector(
                                onTap: () {
                                  //print (inputChatMsg.text);
                                  inputChatMsg.text != ""?
                                  //print (inputChatMsg.text);
                                  writeData(inputChatMsg.text)
                                  //print ("testttttttttttttt");
                                      :print ("");
                                },
                                onLongPress: (){deleteMsg();},

                                child: Padding(
                                  padding: const EdgeInsets.fromLTRB(0,0,0,15),
                                  child:  Icon(
                                    Icons.send,
                                    color: Colors.blue,
                                    size: 30.0,
                                  ),
                                )),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ),
            ])
      //))
    );
  }
}

class OverflowBtn{
  static const String noneClick ='none';
  static const String closedClick ='Closed';
  static const String replacementClick ='Replacement';
  static const String pendingPartsClick ='Pending for Parts';
  static const String pendingBsConfirmClick ='Pending HN/BS Confirmation';
  static const String underRepairClick ='Under Repair';
  static const String forCollectionClick ='Pending collection';
  static const String othersClick ='Others';
  static const List <String> choices = <String> [
    noneClick, closedClick, replacementClick, pendingPartsClick, pendingBsConfirmClick,underRepairClick,forCollectionClick,othersClick];

}